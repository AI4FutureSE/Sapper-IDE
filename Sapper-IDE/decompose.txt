A user is interacting with a large language model. They are crafting prompts and giving them to the LLM in order to get the model to complete a task or generate output.

In order for a large language model to better complete tasks or generate outputs, task requirements need to be decomposed.

The decomposed subtasks can interact with a large language model like a human thought chain, reflecting data flow and control flow.


<Task Description>
I want to build a chatbot that will stop the conversation until someone says GoodBye.
</Task Description>

<Decomposed Subtasks>

<Control While User_Input not equal to GoodBye>

(Subtask1 Input:  Chat_History User_Input Bot_Response Output: Bot_Response Model LLM)
Combine chat history, user input, and bot response to get a new chat history.

(Subtask2 Input: Chat_History User_Input Output: Bot_Response Model LLM)
Keep the conversation going and prompt the user for more input

</Control>
</Decomposed Subtasks>


<Task Description>
I need to develop a function to obtain the weather conditions of the day according to the weather API and automatically draw 500x500 pixel RGB color paintings that meet the weather conditions, draw abstract paintings when the weather is rainy, and draw natural landscape paintings when the weather is sunny, so as to improve the user experience and entertainment.
</Task Description>

<Decomposed Subtasks >

(Subtask1 Input: None Output: Weather_Data Model OpenWeatherMap)
obtain weather conditions for the day

<Control If Weather equal to rainy>

(Subtask2 Input: Weather_Data Output: Painting_Description Model LLM)
generate descriptions of abstract paintings through weather information.

</Control>

<Control If Weather equal to sunny>

(Subtask3 Input: Weather_Data Output: Painting_Description Model LLM)
generate natural landscape descriptions of abstract paintings through weather information.

</Control>

(Subtask4 Input: Painting_Description Output: Painting; Model Image-generation-model)
Generate 500x500 pixel paintings according to Painting_Description.

</Decomposed Subtasks>


<Task Description>
{{Description}}
</Task Description>

了解您的需求，我们可以按照以下步骤来打磨这个案例：

探索视图：用户首先与聊天机器人讨论角色生成器的一些基本需求，例如角色类型（如英雄、反派等）、角色所处的背景环境（如未来科幻世界、奇幻世界等）、角色性格特点（如勇敢、聪明、狡猾等）以及其他相关信息（如角色的典型行为、特殊能力等）。聊天机器人会根据这些信息提供一些初步的设定建议。

设计视图：用户在设计视图中的初始需求可以是：“创建一个独特的科幻角色，具有鲜明的性格特点、背景故事和外貌描述。”接下来，副驾驶可能会问一些澄清问题，如：“您希望角色是正义的英雄还是邪恶的反派？”、“您希望角色的特殊能力是什么？”、“角色的背景故事有何特殊之处？”等。经过一系列的互动后，用户和副驾驶达成共识，最终需求描述可能是：“创建一个英勇善良的科幻英雄，具有独特的心灵感应能力，背景故事中出生于一个未来科幻世界的废墟，拥有神秘的血统。”

AI链分解：根据最终的需求描述，我们可以将任务分解为以下几个步骤：
a. 生成角色背景故事：根据未来科幻世界和神秘血统的设定，生成一个引人入胜的背景故事。
b. 生成角色性格特点：根据英勇善良的要求，为角色生成一组鲜明的性格特点，如勇敢、智慧、正义感等。
c. 生成角色外貌描述：设计一个独特的外貌形象，突出角色的特殊能力（心灵感应）和未来科幻世界的元素。
d. 整合生成内容：将上述三个步骤生成的内容整合在一起，形成一个完整的角色设定。

用户可以在编程视图中通过基于块的可视化编程实现这些步骤，最终获得一个


创建一个科幻角色设定生成器，可以根据用户指定的角色类型、性格特点等条件生成独特的角色设定，角色设定包括角色背景故事，角色性格特点，角色外貌描述。根据角色外貌描述能够生成图片。
